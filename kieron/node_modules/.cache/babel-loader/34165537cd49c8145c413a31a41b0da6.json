{"ast":null,"code":"import { useReducer, useEffect } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { database } from \"../firebase\";\nconst ACTIONS = {\n  SELECT_FOLDER: \"select-folder\",\n  UPDATE_FOLDER: \"update-folder\",\n  SET_CHILD_FOLDERS: \"set-child-folders\",\n  SET_CHILD_FILES: \"set-child-files\"\n};\nexport const ROOT_FOLDER = {\n  name: \"Root\",\n  id: null,\n  path: []\n};\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ACTIONS.SELECT_FOLDER:\n      return {\n        folderId: payload.folderId,\n        folder: payload.folder,\n        childFiles: [],\n        childFolders: []\n      };\n\n    case ACTIONS.UPDATE_FOLDER:\n      return { ...state,\n        folder: payload.folder\n      };\n\n    case ACTIONS.SET_CHILD_FOLDERS:\n      return { ...state,\n        childFolders: payload.childFolders\n      };\n\n    case ACTIONS.SET_CHILD_FILES:\n      return { ...state,\n        childFiles: payload.childFiles\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function useFolder(folderId = null, folder = null) {\n  const [state, dispatch] = useReducer(reducer, {\n    folderId,\n    folder,\n    childFolders: [],\n    childFiles: []\n  });\n  const {\n    currentUser\n  } = useAuth();\n  useEffect(() => {\n    dispatch({\n      type: ACTIONS.SELECT_FOLDER,\n      payload: {\n        folderId,\n        folder\n      }\n    });\n  }, [folderId, folder]);\n  useEffect(() => {\n    if (folderId == null) {\n      return dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: ROOT_FOLDER\n        }\n      });\n    }\n\n    database.folders.doc(folderId).get().then(doc => {\n      dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: database.formatDoc(doc)\n        }\n      });\n    }).catch(e => {\n      console.error(e);\n      dispatch({\n        type: ACTIONS.UPDATE_FOLDER,\n        payload: {\n          folder: ROOT_FOLDER\n        }\n      });\n    });\n  }, [folderId]);\n  useEffect(() => {\n    return database.folders.where(\"parentId\", \"==\", folderId).where(\"userId\", \"==\", currentUser.uid).orderBy(\"createdAt\").onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_FOLDERS,\n        payload: {\n          childFolders: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n  }, [folderId, currentUser]);\n  useEffect(() => {\n    return database.files.where(\"folderId\", \"==\", folderId).where(\"userId\", \"==\", currentUser.uid) // .orderBy(\"createdAt\")\n    .onSnapshot(snapshot => {\n      dispatch({\n        type: ACTIONS.SET_CHILD_FILES,\n        payload: {\n          childFiles: snapshot.docs.map(database.formatDoc)\n        }\n      });\n    });\n  }, [folderId, currentUser]);\n  return state;\n}","map":{"version":3,"sources":["C:/Users/kiero/OneDrive/Documents/normal-mp-8/kieron/File_storage/src/hooks/useFolder.js"],"names":["useReducer","useEffect","useAuth","database","ACTIONS","SELECT_FOLDER","UPDATE_FOLDER","SET_CHILD_FOLDERS","SET_CHILD_FILES","ROOT_FOLDER","name","id","path","reducer","state","type","payload","folderId","folder","childFiles","childFolders","useFolder","dispatch","currentUser","folders","doc","get","then","formatDoc","catch","e","console","error","where","uid","orderBy","onSnapshot","snapshot","docs","map","files"],"mappings":"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","sourcesContent":["import { useReducer, useEffect } from \"react\"\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\nimport { database } from \"../firebase\"\r\n\r\nconst ACTIONS = {\r\n  SELECT_FOLDER: \"select-folder\",\r\n  UPDATE_FOLDER: \"update-folder\",\r\n  SET_CHILD_FOLDERS: \"set-child-folders\",\r\n  SET_CHILD_FILES: \"set-child-files\",\r\n}\r\n\r\nexport const ROOT_FOLDER = { name: \"Root\", id: null, path: [] }\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case ACTIONS.SELECT_FOLDER:\r\n      return {\r\n        folderId: payload.folderId,\r\n        folder: payload.folder,\r\n        childFiles: [],\r\n        childFolders: [],\r\n      }\r\n    case ACTIONS.UPDATE_FOLDER:\r\n      return {\r\n        ...state,\r\n        folder: payload.folder,\r\n      }\r\n    case ACTIONS.SET_CHILD_FOLDERS:\r\n      return {\r\n        ...state,\r\n        childFolders: payload.childFolders,\r\n      }\r\n    case ACTIONS.SET_CHILD_FILES:\r\n      return {\r\n        ...state,\r\n        childFiles: payload.childFiles,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function useFolder(folderId = null, folder = null) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    folderId,\r\n    folder,\r\n    childFolders: [],\r\n    childFiles: [],\r\n  })\r\n  const { currentUser } = useAuth()\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.SELECT_FOLDER, payload: { folderId, folder } })\r\n  }, [folderId, folder])\r\n\r\n  useEffect(() => {\r\n    if (folderId == null) {\r\n      return dispatch({\r\n        type: ACTIONS.UPDATE_FOLDER,\r\n        payload: { folder: ROOT_FOLDER },\r\n      })\r\n    }\r\n\r\n    database.folders\r\n      .doc(folderId)\r\n      .get()\r\n      .then(doc => {\r\n        dispatch({\r\n          type: ACTIONS.UPDATE_FOLDER,\r\n          payload: { folder: database.formatDoc(doc) },\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        console.error(e)\r\n        dispatch({\r\n          type: ACTIONS.UPDATE_FOLDER,\r\n          payload: { folder: ROOT_FOLDER },\r\n        })\r\n      })\r\n  }, [folderId])\r\n\r\n  useEffect(() => {\r\n    return database.folders\r\n      .where(\"parentId\", \"==\", folderId)\r\n      .where(\"userId\", \"==\", currentUser.uid)\r\n      .orderBy(\"createdAt\")\r\n      .onSnapshot(snapshot => {\r\n        dispatch({\r\n          type: ACTIONS.SET_CHILD_FOLDERS,\r\n          payload: { childFolders: snapshot.docs.map(database.formatDoc) },\r\n        })\r\n      })\r\n  }, [folderId, currentUser])\r\n\r\n  useEffect(() => {\r\n    return (\r\n      database.files\r\n        .where(\"folderId\", \"==\", folderId)\r\n        .where(\"userId\", \"==\", currentUser.uid)\r\n        // .orderBy(\"createdAt\")\r\n        .onSnapshot(snapshot => {\r\n          dispatch({\r\n            type: ACTIONS.SET_CHILD_FILES,\r\n            payload: { childFiles: snapshot.docs.map(database.formatDoc) },\r\n          })\r\n        })\r\n    )\r\n  }, [folderId, currentUser])\r\n\r\n  return state\r\n}\r\n"]},"metadata":{},"sourceType":"module"}